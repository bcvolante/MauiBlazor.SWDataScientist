@page "/runes"

@using SWDataScientist.Models
@using SWDataScientist.Services
@inject IRunesService RunesService
@inject ISettingsService SettingsService

<div class="mb-3 row">
	<h1>Runes Management</h1>
</div>

<div class="mb-3">
	<div class="col-sm-12">
		<div class="form-group">
			<div class="mb-3 row">
				<div class="col-sm-12">
					<button @onclick="() => runesDetail.Open()" type="submit" class="mt-2 btn btn-primary float-end">Add Rune</button>
				</div>
			</div>
		</div>
	</div>
	<div class="col-sm-12 table-responsive-sm">
		<table class="table table-sm table-hover">
			<thead>
				<tr>
					<th>Rune ID              </th>
					<th>Is Ancient		 	</th>
					<th>Grade Level		 	</th>
					<th>Power Up Level	 	</th>
					<th>Type ID			 	</th>
					<th>Rarity ID		 	</th>
					<th>Slot			 	</th>
					<th>Main Property		 	</th>
@*					<th>Prefix Property		 	</th>
					<th>Prefix Property Value	 	</th>
					<th>Property 1			 	</th>
					<th>Property 1 Value		 	</th>
					<th>Property 1 Amplify	 	</th>
					<th>Property 2			 	</th>
					<th>Property 2 Value		 	</th>
					<th>Property 2 Amplify	 	</th>
					<th>Property 3			 	</th>
					<th>Property 3 Value		 	</th>
					<th>Property 3 Amplify	 	</th>
					<th>Property 4			 	</th>
					<th>Property 4 Value		 	</th>
					<th>Property 4 Amplify	 	</th>
					<th>Property Converted		</th>*@
					<th>Action		</th>
				</tr>
			</thead>
			<tbody>
				@if (runes == null)
				{
					<tr>
						<td rowspan="23">No Data Found...</td>
					</tr>
				}
				else
				{
					@foreach (var runes in runes)
					{
						<tr>
							<td>@runes.RuneID           </td>
							<td>@runes.IsAncient		</td>
							<td>@runes.GradeLevel		</td>
							<td>@runes.PowerUpLevel		</td>
							<td>@runes.TypeID			</td>
							<td>@runes.RarityID			</td>
							<td>@runes.Slot				</td>
							<td>@runes.MainStat			</td>
							@*<td>@runes.PrefixStat		</td>
							<td>@runes.PrefixStatValue	</td>
							<td>@runes.Stat1			</td>
							<td>@runes.Stat1Value		</td>
							<td>@runes.Stat1Amplify		</td>
							<td>@runes.Stat2			</td>
							<td>@runes.Stat2Value		</td>
							<td>@runes.Stat2Amplify		</td>
							<td>@runes.Stat3			</td>
							<td>@runes.Stat3Value		</td>
							<td>@runes.Stat3Amplify		</td>
							<td>@runes.Stat4			</td>
							<td>@runes.Stat4Value		</td>
							<td>@runes.Stat4Amplify		</td>
							<td>@runes.StatConverted	</td>*@
							<td>
								<button title="Edit" class="btn oi oi-pencil"></button>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</div>

<RunesDetail @ref="runesDetail">
	<Title>Rune Details</Title>
	@*<Body>
	</Body>*@
	<Footer>
		@*<button type="submit" class="btn btn-primary float-end">Save Changes</button>*@
		@*<button type="button" class="btn oi oi-x" aria-label="Close" data-dismiss="modal" @onclick="() => modal.Close()"></button>*@
	</Footer>
</RunesDetail>

@code {
	private List<RunesModel> runes;
	private List<SettingsModel> settingTypeAll;

	private RunesDetail runesDetail { get; set; }

	public int runeID;
	public bool isAncient;
	public int gradeLevel;
	public int powerUpLevel;
	public int typeID;
	public int rarityID;
	public int slot;
	public int mainStat;
	public int prefixStat;
	public int prefixStatValue;
	public int stat1;
	public int stat1Value;
	public int stat1Amplify;
	public int stat2;
	public int stat2Value;
	public int stat2Amplify;
	public int stat3;
	public int stat3Value;
	public int stat3Amplify;
	public int stat4;
	public int stat4Value;
	public int stat4Amplify;
	public int statConverted;

	protected override async Task OnInitializedAsync()
	{
		runes = await RunesService.GetRunes();
		settingTypeAll = await SettingsService.GetSettingBySettingTypeID(-1, 0);
		this.StateHasChanged();
	}
}
