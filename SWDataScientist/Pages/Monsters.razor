@page "/monster"

@using SWDataScientist.Models
@using SWDataScientist.Services
@inject IMonsterService MonsterService
@inject ISettingsService SettingsService

<div class="mb-3 row">
	<h1>Monsters</h1>
</div>

<div class="mb-3 row">
	<div class="col-sm-4">
		<div class="form-group">
			<div class="mb-3 row">
				<label for="settingType" class="col-sm-5 col-form-label">Monster Family</label>
				<div class="col-sm-7">
					<select id="settingType" class="form-select">
						<option value="0" selected disabled>Select Setting Type</option>
						@if (settings != null)
							@foreach (var settings in settings)
							{
								<option value="@(settings.SettingID)">@settings.Description</option>
							}
						}
					</select>
				</div>
			</div>
			<div class="mb-3 row">
				<label for="description" class="col-sm-5 col-form-label">Awaken Name</label>
				<div class="col-sm-7">
					<input id="awakenName" @bind="awakenName" class="form-control" placeholder="Awaken Name" />
				</div>
			</div>
@*			<div class="mb-3 row">
				<div class="col-sm-12">
					<button @onclick="AddSetting" type="submit" class="mt-2 btn btn-primary float-end" hidden="@(settingTypeValue == 0 | isFix == true)">Save Changes</button>
				</div>
			</div>*@
		</div>
	</div>
	<div class="col-sm-8">
	</div>
</div>

@*@if (monsters == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Family Name</th>
				<th>Attribute</th>
				<th>Awaken Name</th>
				<th>Type</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var monster in monsters)
			{
				<tr>
					<td>@monster.FamilyID</td>
					<td>@monster.AttributeID</td>
					<td>@monster.AwakenName</td>
					<td>@monster.TypeID</td>
					<td>
						<button @onclick="@(()=> DeleteStudent(monster))" type="button" class="btn-close" aria-label="Close"></button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}*@

@code {
    private List<MonsterModel> monsters;
	private List<SettingsModel> settings;

    private string awakenName;

    protected override async Task OnInitializedAsync()
    {
        monsters = await MonsterService.GetMonster();
        settings = await SettingsService.GetSettingBySettingTypeID(6, 0);
        this.StateHasChanged();
    }

    private async void DeleteStudent(MonsterModel monsters)
    {
        var response = await MonsterService.DeleteMonster(monsters);
        if (response > 0)
        {
            await OnInitializedAsync();
        }
    }
}